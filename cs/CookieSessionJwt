### HTTP Cookie Session JWT

### - **HTTP 프로토콜의 특징**

- Connenctionless

  - 클라이언트와 서버가 요청과 응답을 한 번 주고받으면 연결을 끊어버리는 특징
  - 클라이언트가 request를 서버로 보내면 서버는 클라이언트가 보낸 request에 맞게 response를 보내고 연결을 끊는다.

- Stateless
  - 위처럼 요청과 응답으로 인해 통신이 끝난다면 상태 정보를 유지하지 않는 특징이다.
  - 예를들어 메인페이지에서 로그인을 하고 다른 페이지로 넘어가면 다시 로그인을 해야된다

### - **쿠키**

- 쿠키는 클라이언트에 저장되는 key와 value로 이루어진 데이터이다.
- 인증 유효 시간을 설정할 수 있고 유효 시간이 정해진다면 클라이언트가 종료되어도 쿠키가 유지된다.
- 서버와 요청 응답으로 인해 쿠키가 저장되면 다음 요청은 쿠키에 담긴 정보를 이용해 참조

### - **쿠키의 문제**

- 사용자 인증에 대한 정보를 모두 클라이언트가 가지고 있게되므로 http 요청을 탈취당할 경우 쿠키 자체를 탈취당해 사용자 정보를 모두 빼앗길 수 있다.

### - **세션**

- 세션은 쿠키를 기반으로 하지만 클라이언트에 저장하는 쿠키와는 다르게 서버에 저장하여 관리한다.
- 서버에서는 클라이언트를 구별하기 위해 각각의 세션ID를 클라이언트마다 부여하게되며 클라이언트가 종료되기 전까지 유지한다.
- 클라이언트에 저장하는 쿠키보다는 보안이 좋다.

### - **세션의 문제**

- 세션 저장소를 서버에서 관리하기 때문에 사용자가 많아지면 많아질수록 서버에 걸리는 부하가 증가한다.

### - **토큰**

- JWT는 Json Web Token의 약자이고 인증에 필요한 정보들을 암호화시킨 토큰을 말한다.
- 세션 방식처럼 토큰 자체를 쿠키에 담아서 보내줄 수도 있고 HTTP 헤더에 담아서 보내줄 수도 있다.

### - **토큰의 동작 방식**

- 클라이언트가 로그인 요청
- 서버에서 유저의 고유한 ID와 다른 인증 정보들과 함께 Payload에 담는다.
- JWT의 유효기간 설정 및 옵션을 설정해준다.
- Secret Key를 이용해 토큰을 발급한다.
- 발급된 토큰은 클라이언트에 쿠키 혹은 로컬스토리지 등에 저장하여 요청을 보낼 때마다 같이 보낸다.
- 서버는 토큰을 Secret Key로 복호화하여 검증하는 과정을 거친다.
- 검증이 완료되면 대응하는 데이터를 보내준다.

### - **토큰의 문제**

- 삭제가 불가능
- 토큰은 탈취당하게 되면 유효 시간이 종료되기 전까지는 탈취자가 얼마든지 악의적으로 사용이 가능하다.
- Refresh Token이라는 것을 이용해 피해를 조금이라도 줄일 수 있다.
